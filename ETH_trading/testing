import indicators as ind
import mplfinance as mpf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# For plotting candlesticks:
import plotly.graph_objects as go
# And to render interactive plots from plotly in your browser:
import plotly.io as pio
pio.renderers.default = "browser"

from plotly.subplots import make_subplots

from data_processing import *

""" Constants """
time_frame = '15m'
exchange = 'Binance'  # later can be input to load_data as well
pair = 'ETHUSDT'

""" Loading data """
# Load old data and add possible new data to it:
filename, candles = load_data(exchange, pair, time_frame)

# Save all the data (candles only for now):
save_data(filename, candles)

""" Processing, draw indicators """
# EMA's
EMA26 = ind.ExponentialMovingAverage(window_length=26, time_frame=time_frame)
EMA26.batch_fit(candles)
EMA13 = ind.ExponentialMovingAverage(window_length=13, time_frame=time_frame)
EMA13.batch_fit(candles)

# ATR's:
ATRChannel26 = ind.ATRChannels(window_length=26, time_frame=time_frame)
ATRChannel26.batch_fit(candles)

# Stochastic RSI:

# Bollinger band:


#RSI = ind.RSI()
#RSI.batch_fit(candles)

""" Making plots using Plotly """
# TODO: Plot +2 and +3 ATR, BB, 26 and 13 EMA, Stochastic RSI

t = candles.index  # time vector for plotting

fig = make_subplots(rows=3, cols=1, shared_xaxes=True)
fig.add_trace(go.Candlestick(x=candles.index,
                             open=candles['open'],
                             high=candles['high'],
                             low=candles['low'],
                             close=candles['close'],
                             showlegend=False),
              row=1, col=1)

fig.add_trace(go.Scatter(x=t, y=EMA13.history,
                         line=dict(color='purple'), name='EMA13'),
              row=1, col=1)
fig.add_trace(go.Scatter(x=t, y=EMA26.history,
                         line=dict(color='orange'), name='EMA26'),
              row=1, col=1)

#fig.add_trace(go.Line(), row=2, col=1)  # S SRI
#fig.add_trace(go.Scatter(mode='lines'), row=2, col=1)  # Extra indicator

fig.update_layout(title_text='{} chart of {} on {}'.format(time_frame, pair, exchange))

fig.show()




